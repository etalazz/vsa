name: Collect Traffic Metrics

on:
  schedule:
    # Run daily at 00:00 UTC
    - cron: '0 0 * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  collect-traffic:
    name: Collect and store traffic metrics
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Collect traffic metrics
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Get current date in YYYY-MM-DD format
            const now = new Date();
            const dateStr = now.toISOString().split('T')[0];
            
            // Fetch traffic data
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            console.log(`Fetching traffic metrics for ${owner}/${repo}`);
            
            // Collect all metrics
            const metrics = {
              date: dateStr,
              timestamp: now.toISOString(),
              repository: `${owner}/${repo}`,
              views: null,
              clones: null,
              referrers: null,
              paths: null
            };
            
            // Get views
            try {
              const viewsResponse = await github.rest.repos.getViews({
                owner,
                repo,
                per: 'day'
              });
              metrics.views = viewsResponse.data;
              console.log(`✓ Views: ${viewsResponse.data.count} total, ${viewsResponse.data.uniques} unique`);
            } catch (error) {
              console.log(`✗ Error fetching views: ${error.message}`);
            }
            
            // Get clones
            try {
              const clonesResponse = await github.rest.repos.getClones({
                owner,
                repo,
                per: 'day'
              });
              metrics.clones = clonesResponse.data;
              console.log(`✓ Clones: ${clonesResponse.data.count} total, ${clonesResponse.data.uniques} unique`);
            } catch (error) {
              console.log(`✗ Error fetching clones: ${error.message}`);
            }
            
            // Get top referrers
            try {
              const referrersResponse = await github.rest.repos.getTopReferrers({
                owner,
                repo
              });
              metrics.referrers = referrersResponse.data;
              console.log(`✓ Referrers: ${referrersResponse.data.length} sources`);
            } catch (error) {
              console.log(`✗ Error fetching referrers: ${error.message}`);
            }
            
            // Get top paths
            try {
              const pathsResponse = await github.rest.repos.getTopPaths({
                owner,
                repo
              });
              metrics.paths = pathsResponse.data;
              console.log(`✓ Paths: ${pathsResponse.data.length} popular paths`);
            } catch (error) {
              console.log(`✗ Error fetching paths: ${error.message}`);
            }
            
            // Ensure directory exists
            const metricsDir = path.join(process.env.GITHUB_WORKSPACE, 'metrics', 'traffic');
            if (!fs.existsSync(metricsDir)) {
              fs.mkdirSync(metricsDir, { recursive: true });
            }
            
            // Write to file
            const outputPath = path.join(metricsDir, `${dateStr}.json`);
            fs.writeFileSync(outputPath, JSON.stringify(metrics, null, 2));
            console.log(`\n✓ Metrics saved to ${outputPath}`);
            
            // Set output for commit step
            core.setOutput('filename', `${dateStr}.json`);

      - name: Commit and push metrics
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add metrics/traffic/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: update traffic metrics for $(date -u +%Y-%m-%d)"
            git push
          fi
