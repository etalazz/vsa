name: Collect Traffic Metrics

on:
  schedule:
    # Run daily at 00:00 UTC
    - cron: '0 0 * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  collect-traffic:
    name: Collect and store traffic metrics
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Collect traffic metrics
        uses: actions/github-script@v7
        with:
          # Force use of your secret; do NOT fall back to the default GITHUB_TOKEN
          github-token: ${{ secrets.TRAFFIC_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');

            const { owner, repo } = context.repo;
            const now = new Date();
            const dateStr = now.toISOString().slice(0,10);

            core.info(`Fetching traffic metrics for ${owner}/${repo}`);

            async function fetchOrThrow(label, fn, args) {
              try {
                const res = await fn(args);
                if (!res || !res.data) throw new Error(`${label} returned no data`);
                const data = res.data;
                const keys = Array.isArray(data) ? `array(length=${data.length})` : Object.keys(data).join(',');
                core.info(`✓ ${label}: status ${res.status}, data=${keys || 'object'}`);
                return data;
              } catch (e) {
                const status = e.status ? `status=${e.status}` : '';
                core.error(`✗ ${label} failed ${status}: ${e.message}`);
                throw e;
              }
            }

            // Fetch all metrics; if any call fails, fail the job (no null snapshots)
            const views = await fetchOrThrow('views', github.rest.repos.getViews, { owner, repo, per: 'day' });
            const clones = await fetchOrThrow('clones', github.rest.repos.getClones, { owner, repo, per: 'day' });
            const referrers = await fetchOrThrow('referrers', github.rest.repos.getTopReferrers, { owner, repo });
            const pathsData = await fetchOrThrow('paths', github.rest.repos.getTopPaths, { owner, repo });

            // Ensure directory exists
            const metricsDir = path.join(process.env.GITHUB_WORKSPACE, 'metrics', 'traffic');
            fs.mkdirSync(metricsDir, { recursive: true });

            // Write to file with a consistent schema
            const outputPath = path.join(metricsDir, `${dateStr}.json`);
            const payload = {
              collected_at: now.toISOString(),
              repo: { owner, repo },
              views,
              clones,
              referrers,
              paths: pathsData
            };
            fs.writeFileSync(outputPath, JSON.stringify(payload, null, 2));
            core.info(`✓ Metrics saved to ${outputPath}`);
            core.setOutput('filename', `${dateStr}.json`);

      - name: Commit snapshot (only if files changed)
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(metrics): snapshot GitHub traffic"
          file_pattern: metrics/traffic/*.json