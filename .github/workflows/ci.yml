name: CI

on:
  pull_request:
    branches: ["**"]
    paths-ignore:
      - "**/*.md"
      - "docs/**"
      - "metrics/**"
      - ".github/ISSUE_TEMPLATE/**"
  push:
    branches: ["master"]
    tags:
      - "v*"
    paths-ignore:
      - "**/*.md"
      - "docs/**"
      - "metrics/**"
      - ".github/ISSUE_TEMPLATE/**"
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ci-${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true

jobs:
  build-test-and-e2e:
    name: Build, test, and conditional E2E
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Debug trigger context
        run: |
          echo "event=${{ github.event_name }}"
          echo "ref=${{ github.ref }}"
          echo "sha=${{ github.sha }}"
          echo "actor=${{ github.actor }}"

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Verify modules
        run: |
          go mod tidy -v
          go mod download

      - name: Vet
        continue-on-error: true
        run: go vet $(go list ./... | grep -vE '/benchmarks($|/)|/test($|/)|/tools/http-loadgen($|/)|/scripts($|/)')

      - name: Test (race + coverage)
        run: >
          go test -race -coverprofile=coverage.out -covermode=atomic
          $(go list ./... | grep -vE '/benchmarks($|/)|/test($|/)|/tools/http-loadgen($|/)|/scripts($|/)')

      - name: Reproducibility suite (fast)
        if: always()
        env:
          GOMAXPROCS: '1'
          CGO_ENABLED: '0'
        run: sh tools/repro/run.sh

      - name: Coverage summary
        run: go tool cover -func=coverage.out | tee coverage.txt

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: coverage.out
          flags: unittests
          fail_ci_if_error: false

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: |
            coverage.out
            coverage.txt

      - name: E2E tests (build tag e2e)
        if: github.event_name == 'pull_request' || github.ref_name == 'master'
        env:
          VSA_CHURN_LIVE: "0"
        run: |
          go test -tags=e2e ./test/e2e -v -count=1 -timeout=10m

      - name: Build binaries (linux/amd64)
        if: github.event_name == 'push'
        env:
          CGO_ENABLED: '0'
        run: |
          mkdir -p dist/linux-amd64
          GOOS=linux GOARCH=amd64 go build -trimpath -ldflags="-s -w" -o dist/linux-amd64/ratelimiter-api ./cmd/ratelimiter-api
          GOOS=linux GOARCH=amd64 go build -trimpath -ldflags="-s -w" -o dist/linux-amd64/http-loadgen ./tools/http-loadgen

      - name: Generate checksums
        if: github.event_name == 'push'
        run: |
          (cd dist/linux-amd64 && sha256sum * > SHA256SUMS)

      - name: Upload build artifacts
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: vsa-binaries-linux-amd64
          path: dist/linux-amd64
          if-no-files-found: error
